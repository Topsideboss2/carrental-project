// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(cuid())
  userType           UserType   @default(USER)
  firstName          String
  lastName           String
  gender             GenderType @default(MALE)
  pwd                Boolean    @default(false)
  nationality        String?
  yearOfBirth        Int?
  nationalIdentifier String?
  email              String     @unique
  phoneNumber        String     @unique
  countryCode        String     @default("+254")
  password           String?
  isPhoneVerified    Boolean    @default(false)
  isEmailVerified    Boolean    @default(false)
  isActive           Boolean    @default(true)
  refreshToken       String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?

  devices            Device[]
  userRoles          UserRole?
  verificationCodes  VerificationCode[]
  reservations       Reservation[]
  invoices           Invoice[]
  payments           Payment[]
  transactionEscrows TransactionEscrow[]
}

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  user      User                   @relation(fields: [userId], references: [id])
  userId    String
  status    VerificationCodeStatus @default(SENT)
  code      String
  codeFor   VerificationFor        @default(EMAIL)
  createdAt DateTime               @default(now())
  expiresAt DateTime
  updatedAt DateTime               @updatedAt
  deletedAt DateTime?
}

model Device {
  id        Int       @id @default(autoincrement())
  deviceId  String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    String    @unique
  user      User?     @relation(fields: [userId], references: [id])
  roleId    Int
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Permission {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  rolePermissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model CarMake {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  cars Car[]
}

model Car {
  id              Int              @id @default(autoincrement())
  carMakeId       Int
  carMake         CarMake          @relation(fields: [carMakeId], references: [id])
  vehicleType     VehicleType      @default(CAR)
  transmission    TransmissionType @default(AUTOMATIC)
  fuelType        FuelType         @default(PETROL)
  carBodyTypeId   Int
  carBodyType     CarBodyType      @relation(fields: [carBodyTypeId], references: [id])
  seats           Int              @default(4)
  engineCapacity  Int              @default(1000)
  model           String
  year            Int
  dailyRate       Float
  stock           Int              @default(1)
  luggage         Int              @default(1)
  drive           CarDrive         @default(TWO_WHEEL_DRIVE)
  exteriorColor   String?
  interiorColor   String?
  pickUpLocation  String?
  pickUpLatitude  String?
  pickUpLongitude String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?

  reservations Reservation[]
  carMedias    CarMedia[]
  carAmenities CarAmenity[]
}

model CarBodyType {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  cars Car[]
}

model CarMedia {
  id        Int       @id @default(autoincrement())
  carId     Int
  car       Car       @relation(fields: [carId], references: [id])
  mediaType MediaType @default(IMAGE)
  mediaUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Reservation {
  id               Int               @id @default(autoincrement())
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  carId            Int
  car              Car               @relation(fields: [carId], references: [id])
  startDate        DateTime
  endDate          DateTime
  isPickUp         Boolean           @default(false)
  pickUpLocation   String?
  pickUpLongitude  String?
  pickUpLatitude   String?
  dropOffLocation  String?
  dropOffLongitude String?
  dropOffLatitude  String?
  status           ReservationStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?

  invoice Invoice?
}

model Invoice {
  id            Int           @id @default(autoincrement())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  reservationId Int           @unique
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  amount        Float
  status        PaymentStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  payments           Payment[]
  transactionEscrows TransactionEscrow[]
}

model MpesaTransaction {
  id                Int       @id @default(autoincrement())
  merchantRequestID String
  checkoutRequestID String
  transactionID     String
  transactionTime   String
  phoneNumber       String
  transactionAmount Float
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
}

model Payment {
  id                Int               @id @default(autoincrement())
  paymentMethod     PaymentMethod     @default(MPESA)
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  invoiceId         Int
  invoice           Invoice           @relation(fields: [invoiceId], references: [id])
  amount            Float
  merchantRequestID String?
  checkoutRequestID String?
  referenceCode     String?
  status            TransactionStatus @default(PENDING)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?

  transactionescrows TransactionEscrow[]
}

model TransactionEscrow {
  id                Int               @id @default(autoincrement())
  transactionNumber String            @unique
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  invoiceId         Int
  invoice           Invoice           @relation(fields: [invoiceId], references: [id])
  paymentId         Int
  payment           Payment           @relation(fields: [paymentId], references: [id])
  amount            Float
  status            TransactionStatus @default(PENDING)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
}

model Amenity {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  carAmenities CarAmenity[]
}

model CarAmenity {
  id        Int     @id @default(autoincrement())
  carId     Int
  car       Car     @relation(fields: [carId], references: [id])
  amenityId Int
  amenity   Amenity @relation(fields: [amenityId], references: [id])
  value     String?
}

enum PaymentMethod {
  MPESA
  BANK
  CASH
}

enum VerificationCodeStatus {
  SENT
  USED
  EXPIRED
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum UserType {
  USER
  ADMIN
}

enum VerificationFor {
  EMAIL
  PHONE
}

enum ReservationStatus {
  PENDING
  APPROVED
  CANCELLED
  PENDING_PAYMENT
  PAID
  DELIVERING
  COMPLETED
  REJECTED
  RETURNED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  DUPLEX
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
}

enum TransactionStatus {
  PENDING
  PAID
  COMPLETED
  CANCELED
}

enum MediaType {
  VIDEO
  IMAGE
}

enum VehicleType {
  CAR
  VAN
  MINIBUS
  PRESTIGE
}

enum CarDrive {
  TWO_WHEEL_DRIVE
  FOUR_WHEEL_DRIVE
}
