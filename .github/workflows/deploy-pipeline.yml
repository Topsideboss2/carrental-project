name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply

jobs:
  # Configure AWS credentials 
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


  # Build AWS infrastructure
  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Run Terraform initialize
        working-directory: ./iac
        run: terraform init

      - name: Run Terraform apply/destroy
        working-directory: ./iac
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get Terraform output image name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_NAME_VALUE=$(terraform output -raw image_name1 | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_NAME1=$IMAGE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output image name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_NAME_VALUE=$(terraform output -raw image_name2 | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_NAME2=$IMAGE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output image name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_NAME_VALUE=$(terraform output -raw image_name3 | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_NAME3=$IMAGE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output domain name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          DOMAIN_NAME_VALUE=$(terraform output -raw domain_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "DOMAIN_NAME=$DOMAIN_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output RDS endpoint
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          RDS_ENDPOINT_VALUE=$(terraform output -raw rds_endpoint | grep -Eo "^[^:]+" | tail -n 1)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output image tag
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_TAG_VALUE=$(terraform output -raw image_tag | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_TAG=$IMAGE_TAG_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output private data subnet az1 id
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          PRIVATE_DATA_SUBNET_AZ1_ID_VALUE=$(terraform output -raw private_data_subnet_az1_id | grep -Eo "^[^:]+" | tail -n 1)
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$PRIVATE_DATA_SUBNET_AZ1_ID_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output runner security group id
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          RUNNER_SECURITY_GROUP_ID_VALUE=$(terraform output -raw runner_security_group_id | grep -Eo "^[^:]+" | tail -n 1)
          echo "RUNNER_SECURITY_GROUP_ID=$RUNNER_SECURITY_GROUP_ID_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output task definition name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          TASK_DEFINITION_NAME_VALUE=$(terraform output -raw task_definition_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "TASK_DEFINITION_NAME=$TASK_DEFINITION_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output ecs cluster name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ECS_CLUSTER_NAME_VALUE=$(terraform output -raw ecs_cluster_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output ecs service name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ECS_SERVICE_NAME_VALUE=$(terraform output -raw ecs_service_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output environment file name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ENVIRONMENT_FILE_NAME_VALUE=$(terraform output -raw environment_file_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ENVIRONMENT_FILE_NAME=$ENVIRONMENT_FILE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output env file bucket name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ENV_FILE_BUCKET_NAME_VALUE=$(terraform output -raw env_file_bucket_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ENV_FILE_BUCKET_NAME=$ENV_FILE_BUCKET_NAME_VALUE" >> $GITHUB_ENV

      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV

    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name1: ${{ env.IMAGE_NAME1 }}
      image_name2: ${{ env.IMAGE_NAME2 }}
      image_name3: ${{ env.IMAGE_NAME3 }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}


  # Create ECR repository
  create_ecr_repository:
    name: Create ECR repository
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if ECR repository exists
        env:
          IMAGE_NAME1: ${{ needs.deploy_aws_infrastructure.outputs.image_name1 }}
          IMAGE_NAME2: ${{ needs.deploy_aws_infrastructure.outputs.image_name2 }}

        run: |
          result=$(aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME1 }}" | jq -r '.repositories[0].repositoryName')
          echo "repo_name1=$result" >> $GITHUB_ENV
          result=$(aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME2 }}" | jq -r '.repositories[0].repositoryName')
          echo "repo_name2=$result" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create ECR repository for web app
        env:
          IMAGE_NAME1: ${{ needs.deploy_aws_infrastructure.outputs.image_name1 }}
        if: env.repo_name1 != env.IMAGE_NAME1
        run: |
          aws ecr create-repository --repository-name ${{ env.IMAGE_NAME1 }}

      - name: Create ECR repository for api app
        env:
          IMAGE_NAME2: ${{ needs.deploy_aws_infrastructure.outputs.image_name2 }}
        if: env.repo_name2 != env.IMAGE_NAME2
        run: |
          aws ecr create-repository --repository-name ${{ env.IMAGE_NAME2 }}


  # Start self-hosted EC2 runner
  start_runner:
    name: Start self-hosted EC2 runner
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Check for running EC2 runner
        run: |
          instances=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ec2-github-runner" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].InstanceId' --output text)

          if [ -n "$instances" ]; then
            echo "runner-running=true" >> $GITHUB_ENV
          else
            echo "runner-running=false" >> $GITHUB_ENV
          fi

      - name: Start EC2 runner
        if: env.runner-running != 'true'
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-0d10246cf6801148f
          ec2-instance-type: t2.small
          subnet-id: ${{ needs.deploy_aws_infrastructure.outputs.private_data_subnet_az1_id }}
          security-group-id: ${{ needs.deploy_aws_infrastructure.outputs.runner_security_group_id }}
          aws-resource-tags: > 
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]

    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

  # Build and push Docker image to ECR
  build_and_push_image:
    name: Build and push Docker images to ECR
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
      - start_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker images
        env:
          IMAGE_NAME1: ${{ needs.deploy_aws_infrastructure.outputs.image_name1 }}
          IMAGE_NAME2: ${{ needs.deploy_aws_infrastructure.outputs.image_name2 }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
          RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          RDS_DB_USERNAME: ${{ secrets.RDS_DB_USERNAME }}
        run: |
          docker build \
          -f carrental/web-Dockerfile \
          -t ${{ env.IMAGE_NAME1 }}:${{ env.IMAGE_TAG }} \
          .
          docker build \
          -f carrental/api-Dockerfile \
          --build-arg DATABASE_URL=postgresql://${{ env.RDS_DB_USERNAME }}:${{ env.RDS_DB_PASSWORD }}@${{ env.RDS_ENDPOINT }}:5432/${{ env.RDS_DB_NAME }} \
          --build-arg REDIS_HOST=${{ env.IMAGE_NAME3 }} \
          --build-arg REDIS_PORT=${{ secrets.REDIS_PORT }} \
          --build-arg REDIS_TTL=${{ secrets.REDIS_TTL }} \
          --build-arg REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
          --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --build-arg REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }} \
          --build-arg REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION }} \
          --build-arg FUTUREFAST_NOTIFICATION_URL=${{ secrets.FUTUREFAST_NOTIFICATION_URL }} \
          --build-arg FUTUREFAST_NOTIFICATION_APP_CODE=${{ secrets.FUTUREFAST_NOTIFICATION_APP_CODE }} \
          --build-arg MPESA_SHORTCODE=${{ secrets.MPESA_SHORTCODE }} \
          --build-arg MPESA_PASSKEY=${{ secrets.MPESA_PASSKEY }} \
          --build-arg MPESA_CONSUMER_KEY=${{ secrets.MPESA_CONSUMER_KEY }} \
          --build-arg MPESA_CONSUMER_SECRET=${{ secrets.MPESA_CONSUMER_SECRET }} \
          --build-arg MPESA_CALLBACK_URL=${{ secrets.MPESA_CALLBACK_URL }} \
          --build-arg SAFARICOM_URL=${{ secrets.SAFARICOM_URL }} \
          --build-arg CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }} \
          --build-arg CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} \
          --build-arg CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} \
          -t ${{ env.IMAGE_NAME2 }}::${{ env.IMAGE_TAG }} \
          .

      - name: Show docker image names
        run: |
            docker images

      - name: Retag Docker images
        env:
            IMAGE_NAME1: ${{ needs.deploy_aws_infrastructure.outputs.image_name1 }}
            IMAGE_NAME2: ${{ needs.deploy_aws_infrastructure.outputs.image_name2 }}
        run: |
          docker tag ${{ env.IMAGE_NAME1 }} ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME1 }}
          docker tag ${{ env.IMAGE_NAME2 }} ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME2 }}

      - name: Push Docker Images to Amazon ECR
        env:
            IMAGE_NAME1: ${{ needs.deploy_aws_infrastructure.outputs.image_name1 }}
            IMAGE_NAME2: ${{ needs.deploy_aws_infrastructure.outputs.image_name2 }}
        run: |
            docker push ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME1 }}
            docker push ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME2 }}


  # Create environment file and export to S3 
  export_env_variables:
    name: Create environment file and export to S3 
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - start_runner
      - build_and_push_image
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Export environment variable values to file
        env:
            ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
            RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
        run: |
          echo "RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}" > ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "REDIS_TTL=${{ secrets.REDIS_TTL }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "FUTUREFAST_NOTIFICATION_URL=${{ secrets.FUTUREFAST_NOTIFICATION_URL }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "FUTUREFAST_NOTIFICATION_APP_CODE=${{ secrets.FUTUREFAST_NOTIFICATION_APP_CODE }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "MPESA_SHORTCODE=${{ secrets.MPESA_SHORTCODE }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "MPESA_PASSKEY=${{ secrets.MPESA_PASSKEY }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "MPESA_CONSUMER_KEY=${{ secrets.MPESA_CONSUMER_KEY }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "MPESA_CONSUMER_SECRET=${{ secrets.MPESA_CONSUMER_SECRET }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "MPESA_CALLBACK_URL=${{ secrets.MPESA_CALLBACK_URL }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "SAFARICOM_URL=${{ secrets.SAFARICOM_URL }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}

      - name: Upload environment file to S3
        env:
          ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
          ENV_FILE_BUCKET_NAME: ${{ needs.deploy_aws_infrastructure.outputs.env_file_bucket_name }}
        run: aws s3 cp ${{ env.ENVIRONMENT_FILE_NAME }} s3://${{ env.ENV_FILE_BUCKET_NAME }}/${{ env.ENVIRONMENT_FILE_NAME }}


  # Stop the self-hosted EC2 runner
  stop_runner:
    name: Stop self-hosted EC2 runner
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - start_runner
      - build_and_push_image
      - export_env_variables
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy' && always() 
    runs-on: ubuntu-latest
    steps:
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start_runner.outputs.label }}
          ec2-instance-id: ${{ needs.start_runner.outputs.ec2-instance-id }}


  # Create new task definition revision
  create_td_revision:
    name: Create new task definition revision
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure 
      - create_ecr_repository
      - start_runner
      - build_and_push_image
      - export_env_variables
      - stop_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Create new task definition revision
        env:
          ECS_FAMILY: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
          ECS_IMAGE1: ${{ secrets.ECR_REGISTRY }}/${{ needs.deploy_aws_infrastructure.outputs.image_name1 }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
          ECS_IMAGE2: ${{ secrets.ECR_REGISTRY }}/${{ needs.deploy_aws_infrastructure.outputs.image_name2 }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
          # Get existing task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_FAMILY }})

          # update the existing task definition by performing the following actions:
          # 1. Update the `containerDefinitions[0].image` to the new image we want to deploy
          # 2. Remove fields from the task definition that are not compatibile with `register-task-definition` --cli-input-json
          NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq --arg IMAGE1 "${{ env.ECS_IMAGE1 }}" --arg IMAGE2 "${{ env.ECS_IMAGE2 }}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE2 | .containerDefinitions[1].image = $IMAGE1 | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          # Register the new task definition and capture the output as JSON
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")

          # Grab the new revision from the output
          NEW_TD_REVISION=$(echo "$NEW_TASK_INFO" | jq '.taskDefinition.revision')

          # Set the new revision as an environment variable
          echo "NEW_TD_REVISION=$NEW_TD_REVISION" >> $GITHUB_ENV

    outputs:
      new_td_revision: ${{ env.NEW_TD_REVISION }}


  # Restart ECS Fargate service
  restart_ecs_service:
    name: Restart ECS Fargate service
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure 
      - create_ecr_repository
      - start_runner
      - build_and_push_image
      - export_env_variables
      - stop_runner
      - create_td_revision
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Update ECS Service
        env:
          ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
          TD_NAME: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --task-definition ${{ env.TD_NAME }}:${{ needs.create_td_revision.outputs.new_td_revision }} --force-new-deployment

      - name: Wait for ECS service to become stable
        env:
            ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
            ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
        run: |
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME }}
